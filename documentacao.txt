Os itens "Conjurados" diminuem a qualidade duas vezes mais rápido que os outros itens:

O código atual não aborda explicitamente a condição para itens "Conjurados". Será necessário adicionar uma verificação específica para esses itens e reduzir a qualidade deles duas vezes mais rápido.


-------- day 0 --------
name, sellIn, quality
+5 Dexterity Vest, 10, 20
Aged Brie, 2, 0
Elixir of the Mongoose, 5, 7
Sulfuras, Hand of Ragnaros, 0, 80
Sulfuras, Hand of Ragnaros, -1, 80
Backstage passes to a TAFKAL80ETC concert, 15, 20
Backstage passes to a TAFKAL80ETC concert, 10, 49
Backstage passes to a TAFKAL80ETC concert, 5, 49
Conjured Mana Cake, 3, 6

-------- day 1 --------
name, sellIn, quality
+5 Dexterity Vest, 9, 19
Aged Brie, 1, 1
Elixir of the Mongoose, 4, 6
Sulfuras, Hand of Ragnaros, 0, 80
Sulfuras, Hand of Ragnaros, -1, 80
Backstage passes to a TAFKAL80ETC concert, 14, 21
Backstage passes to a TAFKAL80ETC concert, 9, 50
Backstage passes to a TAFKAL80ETC concert, 4, 50
Conjured Mana Cake, 2, 5



Polimorfismo:

Cada tipo de item (AgedBrieItem, BackstagePassesItem, ConjuredItem) estende a classe base Item e implementa seu próprio comportamento, permitindo polimorfismo.

Métodos Específicos:
Cada classe específica agora implementa métodos específicos para a lógica de qualidade após a expiração (updateQualityAfterExpiration), tornando o código mais modular.

Reutilização de Código:
A lógica comum entre os tipos de item é mantida na classe base Item, garantindo a reutilização de código.